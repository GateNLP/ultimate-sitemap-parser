Contributing
============

Get Started
-----------

To install USP for development, you'll need `Poetry <https://python-poetry.org/>`_ to automatically manage the virtual environment.

Fork and clone the repo, then run ``poetry install --with dev``. This will install all the dependencies and the package itself as an editable install. The remainder of this guide assumes you have activated the Poetry shell with ``poetry shell`` or will prefix each command with ``poetry run``.

It's best practice to make an issue, or comment on an existing one, before working on your PR.

Linting
-------

We use `Ruff <https://docs.astral.sh/ruff/>`_ to lint USP. This is done in two stages:

.. code-block:: bash

    poetry run ruff check --fix
    poetry run ruff format

Testing
-------

See the ``tests`` directory for automated tests written with Pytest.

When contributing please make sure that:

* any bugfixes include a test that fails without the fix
* any new functionality includes appropriate tests

To run tests, use ``pytest`` or ``make test``.

Integration Tests
-----------------

Tests against real-world sitemaps are written using `VCR.py <https://vcrpy.readthedocs.io/>`_ to cache HTTP responses in *cassettes*. Due to the size of the cassettes, the cassette files are not included in this repository.

.. caution::

    Cassettes are generated by running a real scrape with the current version of USP. As such, changes to the HTTP client behaviour (such as modifying how requests are made or which paths are requested) may prevent integration tests from being run until cassettes are regenerated. Additionally, running integration tests against old versions is not necessarily supported.

Downloading Cassettes
~~~~~~~~~~~~~~~~~~~~~

Cassettes are distributed from releases in a `separate repository <https://github.com/GateNLP/usp-test-cassettes>`_. For an overview of available cassettes, see `the manifest file <https://github.com/GateNLP/usp-test-cassettes/blob/main/manifest.json>`_.

To download and test against all cassettes, run:

.. code-block:: bash

    python tests/integration/download.py
    pytest --integration tests/integration

Memory Profiling
~~~~~~~~~~~~~~~~

Ensure you have installed the extra ``perf`` dependency group with ``poetry install --with perf``.

To profile memory during integration tests, run the test command with ``--memray``.

.. code-block:: bash

    pytest --integration [--memray-bin-path memray] tests/integration --memray

Without the ``--memray-bin-path`` argument, this will measure memory usage and report at the end of the test run.
With the argument, it will output the memory usage reports to the *memray* directory, which can then be used to generate reports e.g. `a flamegraph <https://bloomberg.github.io/memray/flamegraph.html>`_.

Performance Profiling
~~~~~~~~~~~~~~~~~~~~~

Ensure you have installed the extra ``perf`` dependency group with ``poetry install --with perf``.

To profile performance during tests, run through the pyinstrument CLI:

.. code-block:: bash

    pyinstrument -m pytest --integration tests/integration

Pyinstrument does not distinguish between tests, so you may want to filter to a specific test at a time with ``-k``. For example, to only run the bbc.co.uk test:

.. code-block:: bash

    pyinstrument -m pytest --integration -k bbc tests/integration

This can be viewed as an interactive HTML report by passing ``-r html`` to ``pyinstrument`` initially, or using the ``--load-prev`` command output at the end of the test run.

Documentation
-------------

This documentation is built with Sphinx.

To build documentation, install the extra ``docs`` dependency group with ``poetry install --with docs``, then:

.. code-block:: bash

    cd docs
    make livehtml

This will start a live build of the docs at ``http://localhost:8000``.

Read the Docs will build a preview version when you make a PR.

You may need to update the reference documentation with your changes:

* The public interface is documented in ``docs/reference/api``
* The CLI interface is documented in ``docs/reference/cli.rst``
* Supported sitemap formats are documented in ``docs/reference/formats.rst`` with examples in ``docs/reference/formats_examples``.